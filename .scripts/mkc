#!/usr/bin/env bash

# Description: Auto-generate C/C++ project.
# Dependencies: cmake

set -euo pipefail

CWD=$(pwd)
c=(
    "$(printf '\033[0m')"       # Color Off
    "$(printf '\033[0;36m')"    # Cyan
    "$(printf '\033[0;37m')"    # Grey
    "$(printf '\033[1;37m')"    # Bold Grey
)

ifexist() {
    if [[ -f "$1" ]]; then
        echo "Aborted: ’$1’ exists"
    elif [[ -d "$1"  ]]; then
        echo "Aborted: ’$1’ is a directory (exists)"
    else
        false
    fi
}

create_main() {
    ifexist "$1" && return
    [[ -d src ]] && src="src" || src="."
    filename="$1"
    lang="${filename##*.}"
    case "$lang" in
        c)
            {
                echo -e "#include <stdio.h>"
                echo -e "#include <stdlib.h>"
                echo
                echo -e "int main (int argc, char const *argv[])"
                echo -e "{"
                echo -e "    printf(\"Hello world!\\\n\");"
                echo -e "    return 0;"
                echo -e "}"
            } >> "$src"/"$filename" ;;
        cpp)
            {
                echo -e "#include <iostream>"
                echo
                echo -e "using namespace std;"
                echo
                echo -e "int main (int argc, char const *argv[])"
                echo -e "{"
                echo -e "    cout << \"Hello world!\" << endl;"
                echo -e "    return 0;"
                echo -e "}"
            } >> "$src"/"$filename" ;;
        *) ;;
    esac
}

create_cmake() {
    ifexist "CMakeLists.txt" && return
    {
        echo -e "cmake_minimum_required(VERSION 3.10)"
        echo -e "project($1 VERSION 1.0)"
        echo
        echo -e "set(CMAKE_CXX_STANDARD 20)"
        echo -e "set(CMAKE_CXX_STANDARD_REQUIRED On)"
        # echo -e "set(CMAKE_CXX_EXTENSIONS Off)"
        echo
        echo -e "file(GLOB_RECURSE SRC_FILES src/*.$2)"
        echo -e "add_executable($3 \${SRC_FILES})"
        echo -e "target_include_directories($3 PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)"
    } >> CMakeLists.txt
}

creat_clangd_conf() {
    ifexist ".clangd" && return
    {
        echo "If:"
        echo "  PathMatch: .*\.cpp"
        echo
        echo "CompileFlags:"
        echo "  Add: [-std=c++20]"
        echo
        echo "---"
        echo
        echo "If:"
        echo "  PathMatch: .*\.c"
        echo
        echo "CompileFlags:"
        echo "  Add: [-std=c17]"
    } >> .clangd
}

create_project() {
    printf "%s" "${c[1]}"
    echo "╭─────────────────────────╮"
    echo "│ project creation script │"
    echo "╰─────────────────────────╯"
    printf "%s Project name: %s"      "${c[1]}" "${c[0]}" && read -r project
    printf "%s Language [c/cpp]: %s"  "${c[1]}" "${c[0]}" && read -r lang
    printf "%s Execute file name: %s" "${c[1]}" "${c[0]}" && read -r exe
    echo

    ifexist "$project" && return
    [[ "$lang" != "c" && "$lang" != "cpp" ]] && lang="cpp"

    mkdir "$project" && cd "$project"
    mkdir -p bin src include data lib
    create_cmake "$project" "$lang" "$exe"
    create_main "main.$lang"
    cd "$CWD"

    echo "${c[1]}Project structure:"
    echo "${c[3]}$project"
    echo "${c[3]}├── bin             ${c[2]}<- Compiled binaries"
    echo "${c[3]}├── data            ${c[2]}<- Project data"
    echo "${c[3]}├── include         ${c[2]}<- Header files"
    echo "${c[3]}├── lib             ${c[2]}<- Dynamic objects"
    echo "${c[3]}├── src             ${c[2]}<- Source files"
    echo "${c[2]}│   └── main.$lang"
    echo "${c[2]}└── CMakeLists.txt  ${c[2]}<- Project CMakeLists"
    printf "%s" "${c[0]}"
}

if [[ $# -eq 0 ]]; then
    create_project
else
    for args in "$@"; do
        case "$args" in
            *.c|*.cpp) create_main "$args" ;;
            .clangd) creat_clangd_conf ;;
            *) echo -e "Error: Invalid argument '$args'" && exit 1 ;;
            # *) create_project ;;
        esac
    done
fi
