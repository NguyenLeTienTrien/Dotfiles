#!/usr/bin/env bash

# Description: Auto-generate C/C++ project.
# Dependencies: cmake

set -euo pipefail

create_folder() {
    read -r -p "Create $project folder? [Y/n] " yn
    if [[ "$yn" = "y" ]] || [[ "$yn" = "Y" ]] || [[ "$yn" = "yes" ]] || [[ "$yn" = "Yes" ]] || [[ -z "$yn" ]]; then
        if [[ ! -d "$project" ]]; then
            if ! mkdir -p "$project"; then
                echo "Error: Incorrect directory." && exit 1
            fi
        else
            echo "$project folder existed."
            exit 1
        fi
    else
        exit 0
    fi
}

create_main() {
    [[ -d src ]] && src="src" || src="."
    if [[ "$language" = "c" ]]; then
        {
            echo -e "#include <stdio.h>"
            echo -e "#include <stdlib.h>"
            echo
            echo -e "int main (int argc, char const *argv[])"
            echo -e "{"
            echo -e "    printf(\"Hello world!\\\n\");"
            echo -e "    return 0;"
            echo -e "}"
        } >> "$src"/main.c
    elif [[ "$language" = "cpp" ]]; then
        {
            echo -e "#include <iostream>"
            echo
            echo -e "using namespace std;"
            echo
            echo -e "int main (int argc, char const *argv[])"
            echo -e "{"
            echo -e "    cout << \"Hello world!\" << endl;"
            echo -e "    return 0;"
            echo -e "}"
        } >> "$src"/main.cpp
    else
    	exit 1
    fi
}

create_cmake() {
    {
        echo -e "cmake_minimum_required(VERSION 3.10)"
        echo -e "project($project VERSION 1.0)"
        echo
        echo -e "set(CMAKE_CXX_STANDARD 20)"
        echo -e "set(CMAKE_CXX_STANDARD_REQUIRED On)"
        # echo -e "set(CMAKE_CXX_EXTENSIONS Off)"
        echo
        echo -e "file(GLOB_RECURSE SRC_FILES src/*.$language)"
        echo -e "add_executable($exe \${SRC_FILES})"
        echo -e "target_include_directories($exe PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)"
    } >> CMakeLists.txt
}

create_clangd() {
    {
        echo -e "-std=c++20"
    } >> compile_flags.txt
}

main() {
    read -r -p "Enter project name: " project
    read -r -p "[S]impled or [E]xtended: " mode; [[ "$mode" = "Extended" || "$mode" = "extended" || "$mode" = "e" || "$mode" = "E" ]] && mode="E"
    [[ "$mode" = "E" ]] && read -r -p "Enter execute file name: " exe
    read -r -p "'c' or 'cpp'?: " language; [[ "$language" != "c" ]] && [[ "$language" != "cpp" ]] && language="cpp"
    
    create_folder
    cd "$project" || exit 1
    [[ "$mode" = "E" ]] && mkdir -p bin src include data lib && create_cmake || create_clangd
    create_main
    
    echo -e "Create project successfully!"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
